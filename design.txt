{/* <div className="bg-gray-100">
        <h2 className="text-center font-tomatoes text-red-500 text-2xl sm:text-3xl md:text-4xl lg:text-5xl mb-4 mt-8">
          Some of Our
        </h2>
        <h4
          className="text-center text-gray-700 text-lg sm:text-xl font-bold uppercase mb-8 md:mb-12"
          style={{ fontFamily: "Nunito" }}
        >
          BEST SELLERS
        </h4>
        <div
          className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mx-auto max-w-7xl"
          style={{ padding: "20px" }}
        >
          {loading ? (
            <Loader />
          ) : (
            <>
              {products && products.length > 0 ? (
                products &&
                products.map((item) => (
                  <div
                    key={item.id}
                    className="rounded-md overflow-hidden shadow-md flex flex-col items-center hover:shadow-lg"
                  >
                    <Link to={`/details/meow-cat/${item.id}`}>
                      <div className="relative">
                        <img
                          src={item?.product_url}
                          alt="seller img"
                          className="w-full object-cover object-center transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-105"
                        />
                      </div>
                      <div className="w-full px-4 pt-4">
                        <span
                          className="font-bold text-lg text-gray-900 hover:text-red-500"
                          style={{
                            fontSize: "18.75px",
                            fontFamily: "Nunito",
                            display: "block",
                            maxHeight: "3rem",
                            overflow: "hidden",
                            textOverflow: "ellipsis",
                            whiteSpace: "nowrap",
                          }}
                        >
                          {item?.product_name}
                        </span>
                        <span
                          className="text-red-500 text-sm font-bold block"
                          style={{ fontSize: "14px", fontFamily: "Nunito" }}
                        >
                          Rs.{item?.price}
                        </span>
                        <div className="text-right">
                          <span
                            className="text-gray-400 text-xs font-medium"
                            style={{ fontSize: "12px", fontFamily: "Nunito" }}
                          >
                            {item?.rating}
                            <FaStar className="text-yellow-400 inline-block" />
                          </span>
                          <br />
                          <span
                            className="text-gray-400 text-xs font-medium"
                            style={{ fontSize: "12px", fontFamily: "Nunito" }}
                          >
                            {item?.product_views} reviews
                          </span>
                        </div>
                      </div>
                    </Link>
                  </div>
                ))
              ) : (
                <h1 className="text-gray-700 text-center">No Data Found</h1>
              )}
            </>
          )}
        </div>
      </div> */}

      //cart authSlice
      import { createSlice } from "@reduxjs/toolkit";

const CART_KEY = "cart";

const getCartFromStorage = (userId) => {
  const cart = localStorage.getItem(userId);
  const shippingInfo = JSON.parse(localStorage.getItem("shippingInfo"));
  if (cart) {
    return { items: JSON.parse(cart), shippingInfo };
  }
  return { items: [], shippingInfo: null };
};

const saveCartToStorage = (cart, userId) => {
  localStorage.setItem(userId, JSON.stringify(cart));
};

const clearShippingInfo = () => {
  localStorage.removeItem("shippingInfo");
};

const cartSlice = createSlice({
  name: "cart",
  initialState: {
    items: getCartFromStorage().items,
    shippingInfo: null,
  },
  reducers: {
    addItem(state, action) {
      const { userId, product, quantity } = action.payload;
      const existingProduct = state.items.find(
        (item) => item.prod_slug === product.prod_slug && item.userId === userId
      );
      if (!existingProduct) {
        state.items.push({ ...product, quantity, userId });
        saveCartToStorage(state.items, userId);
      }
    },

    removeItem(state, action) {
      const { userId, prod_slug } = action.payload;
      const filteredState = state.items.filter(
        (item) => item.prod_slug !== prod_slug || item.userId !== userId
      );
      state.items = filteredState;
      saveCartToStorage(filteredState, userId);
    },

    incrementItem(state, action) {
      const { userId, prod_slug } = action.payload;
      const productIndex = state.items.findIndex(
        (item) => item.prod_slug === prod_slug && item.userId === userId
      );
      if (productIndex >= 0) {
        state.items[productIndex].quantity++;
        saveCartToStorage(state.items, userId);
      }
    },

    decrementItem(state, action) {
      const { userId, prod_slug } = action.payload;
      const productIndex = state.items.findIndex(
        (item) => item.prod_slug === prod_slug && item.userId === userId
      );
      if (productIndex >= 0 && state.items[productIndex].quantity > 1) {
        state.items[productIndex].quantity--;
        saveCartToStorage(state.items, userId);
      }
    },

    resetCart(state) {
      state.items = [];
      state.shippingInfo = null;
      saveCartToStorage(state.items, userId);
      clearShippingInfo();
    },

    setLoggedIn(state, action) {
      state.loggedIn = action.payload;
    },

    addShippingInfo(state, action) {
      state.shippingInfo = action.payload;
      localStorage.setItem("shippingInfo", JSON.stringify(action.payload));
    },
  },
});

export const {
  addItem,
  removeItem,
  decrementItem,
  incrementItem,
  resetCart,
  setLoggedIn,
  addShippingInfo,
} = cartSlice.actions;

export default cartSlice.reducer;



import React, { useState } from "react";
import MetaData from "../metaData/MetaData";
import { Country, State } from "country-state-city";
import CheckOutSteps from "../../components/checkOutSteps/CheckOutSteps";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate } from "react-router-dom";
import {
  FaExchangeAlt,
  FaGlobe,
  FaHome,
  FaMapMarkerAlt,
  FaPhone,
} from "react-icons/fa";
import { toast } from "react-toastify";
import { addShippingInfo } from "../../redux/features/cartSlice";
import SubHeader from "../../components/header/subHeader/SubHeader";

const ShippingDetails = () => {
  const { shippingInfo } = useSelector((state) => state.cart);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const [address, setAddress] = useState(shippingInfo?.address || "");
  const [city, setCity] = useState(shippingInfo?.city || "");
  const [state, setState] = useState(shippingInfo?.state || "");
  const [country, setCountry] = useState(shippingInfo?.country || "");
  const [pinCode, setPinCode] = useState(shippingInfo?.pinCode || "");
  const [phoneNo, setPhoneNo] = useState(shippingInfo?.phoneNo || "");

  const shippingSubmit = (e) => {
    e.preventDefault();
    if (phoneNo.length !== 10) {
      toast.error("Phone number should be 10 digit long!");
      return;
    } else {
      dispatch(
        addShippingInfo({ address, city, state, country, pinCode, phoneNo })
      );

      navigate("/confirm/order");
    }
  };

  return (
    <>
      <MetaData title="Shipping Details" />
      <SubHeader />
      <CheckOutSteps activeStep={0} />

      <div className=" min-h-screen flex flex-col justify-center py-6 sm:py-12 px-4 sm:px-6 lg:px-8">
        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          <h2 className="mt-6 text-xl font-bold text-gray-700">
            Shipping Details
          </h2>

          <form onSubmit={shippingSubmit} className="mt-8 space-y-6">
            <div className="rounded-md shadow-sm">
              <div className="mb-2">
                <label htmlFor="full-name" className="flex items-center">
                  <FaHome className="mr-2" />
                  Address
                </label>
                <input
                  id="address"
                  name="address"
                  type="text"
                  autoComplete="address"
                  placeholder="Address"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  className="appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-gray-200 focus:border-gray-200 focus:z-10 sm:text-sm"
                />
              </div>
              <div className="mb-2">
                <label htmlFor="full-name" className="flex items-center">
                  <FaMapMarkerAlt className="mr-2" />
                  City
                </label>
                <input
                  id="city"
                  name="city"
                  type="text"
                  placeholder="City"
                  value={city}
                  onChange={(e) => setCity(e.target.value)}
                  className="appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-gray-200 focus:border-gray-200 focus:z-10 sm:text-sm mt-2"
                />
              </div>

              <div className="mb-2">
                <label htmlFor="full-name" className="flex items-center">
                  <FaMapMarkerAlt className="mr-2" />
                  pinCode
                </label>
                <input
                  id="pinCode"
                  name="pinCode"
                  type="text"
                  placeholder="pinCode"
                  value={pinCode}
                  onChange={(e) => setPinCode(e.target.value)}
                  className="appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-gray-200 focus:border-gray-200 focus:z-10 sm:text-sm mt-2"
                />
              </div>
              <div className="mb-2">
                <label htmlFor="full-name" className="flex items-center">
                  <FaPhone className="mr-2" />
                  PhoneNo
                </label>
                <div className="flex mb-2">
                  <select
                    id="country-code"
                    name="country-code"
                    defaultValue="+977"
                    className="appearance-none rounded relative w-1/4 border-t border-b border-l border-gray-300 px-3 py-2 bg-gray-100 text-gray-900 focus:outline-none focus:ring-gray-200 focus:border-gray-200 focus:z-10 sm:text-sm"
                  >
                    <option value="+977">+977</option>
                  </select>
                  <input
                    id="PhoneNo"
                    name="PhoneNo"
                    type="number"
                    placeholder="Phone number"
                    value={phoneNo}
                    onChange={(e) => setPhoneNo(e.target.value)}
                    className="appearance-none rounded relative w-3/4 border border-gray-300 px-3 py-2 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-gray-200 focus:border-gray-200 focus:z-10 sm:text-sm"
                  />
                </div>
              </div>

              <div className="mb-2">
                <label htmlFor="full-name" className="flex items-center">
                  <FaGlobe className="mr-2" />
                  Country
                </label>
                <div className="flex">
                  <select
                    id="country"
                    required
                    onChange={(e) => setCountry(e.target.value)}
                    className="w-full border focus:outline-none rounded py-2 px-3"
                  >
                    <option value="">Country</option>
                    {Country &&
                      Country.getAllCountries().map((item) => (
                        <option key={item.isoCode} value={item.isoCode}>
                          {item.name}
                        </option>
                      ))}
                  </select>
                </div>
              </div>

              {country && (
                <div className="mb-2">
                  <label htmlFor="full-name" className="flex items-center">
                    <FaExchangeAlt className="mr-2" />
                    State
                  </label>
                  <div className="flex">
                    <select
                      id="country"
                      required
                      value={state}
                      onChange={(e) => setState(e.target.value)}
                      className="w-full border focus:outline-none rounded py-2 px-3"
                    >
                      <option value="">state</option>
                      {State &&
                        State.getStatesOfCountry(country).map((item) => (
                          <option key={item.isoCode} value={item.isoCode}>
                            {item.name}
                          </option>
                        ))}
                    </select>
                  </div>
                </div>
              )}

              <div className="flex items-center justify-center mt-6">
                <button
                  type="submit"
                  className={`w-full bg-red-600 text-white py-2 px-4 border border-transparent rounded-md shadow-sm cursor-pointer
                  focus:outline-none`}
                >
                  Submit
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </>
  );
};

export default ShippingDetails;



select flavours
  <div className="mr-4">
                      {/* Select Flavor */}
                      <label
                        htmlFor="flavor"
                        className="font-semibold text-gray-700 mb-2 block"
                      >
                        Select Flavor Basic:
                      </label>
                      <select
                        id="flavor"
                        className="w-80 border focus:outline-none rounded py-2 px-3"
                        onChange={handleFlavorChange}
                        value={selectedFlavor || ""}
                      >
                        <option value="">Select flavour</option>
                        {flavours &&
                          flavours.map((flavour) => (
                            <option key={flavour.id} value={flavour.id}>
                              {flavour.flavorName}
                            </option>
                          ))}
                      </select>
                    </div>



                    Here is cartDetailsPage jsx

                      <MetaData title="view cart" />
        <SubHeader />
        {progressing ? (
          <Loader />
        ):(
          <>
              <div className="flex px-4 py-4 flex-col bg-gray-50 md:flex-row">
          {/* Left Column */}
          <div className="md:w-2/3 p-4">
            <h3 className="text-2xl text-gray-700 font-semibold px-2 my-3">
              My Cart
            </h3>
            {cartItems && cartItems.length > 0 ? (
              <>
                {cartItems.flatMap((cart) =>
                  cart.items?.map((item) => (
                    <>
                      <div key={item.id} className="flex items-start mb-4">
                        <img
                          src={item.product.product_url}
                          alt="Product"
                          className="p-2 w-28 h-28 sm:w-32 sm:h-32 md:w-36 md:h-36 lg:w-40 lg:h-40 object-contain object-top"
                        />

                        <div className="flex flex-col px-12">
                          <h2 className="text-lg font-semibold text-gray-700">
                            {item.product.product_name}
                          </h2>
                          <div className="flex items-center mt-2 text-gray-700">
                            <span className="mr-2">Quantity:</span>
                            <div className="flex ml-auto">
                              <button
                                className="px-3 py-1 bg-gray-200 rounded-l"
                                onClick={() =>
                                  handleDecrement(item.product.prod_slug)
                                }
                              >
                                -
                              </button>
                              <input
                                type="text"
                                className="w-16 px-3 py-1 text-center focus:outline-none"
                                value={item.quantity}
                              />
                              <button
                                className="px-3 py-1 bg-gray-200 rounded-r"
                                onClick={() =>
                                  handleIncrement(item.product?.prod_slug)
                                }
                              >
                                +
                              </button>
                            </div>
                          </div>
                          <h2 className="text-gray-700 my-1">
                            Price: Rs.{item.product.price}
                          </h2>
                        </div>
                      </div>
                      <div className="flex items-center px-8">
                        <div className="flex justify-center">
                          <Link className="border mr-2 p-2 text-red-500">
                            <FaHeart />
                          </Link>
                          <Link className="border p-2 text-red-500">
                            <FaTrash
                              onClick={() => handleRemoveItem(item.id)}
                            />
                          </Link>
                        </div>
                        <h3 className="ml-auto text-sm lg:text-base text-gray-700 font-semibold">
                          Sub-Total: Rs.{item.product.price * item.quantity}
                        </h3>
                      </div>
                    </>
                  ))
                )}
              </>
            ) : (
              <div className="flex flex-col items-center justify-center">
                <FaShoppingBasket className="text-4xl text-gray-400 mb-4" />
                <h2 className="text-xl text-gray-500 mb-4">
                  Your cart is empty
                </h2>
              </div>
            )}

            <hr className="my-2" />
            {/* Add more product details here */}

            <div className="mt-4 flex justify-end">
              <Link to="/">
                <button className="text-sm text-gray-800 px-4 py-2 bg-[#103755] text-white rounded">
                  Continue Shopping
                </button>
              </Link>
            </div>
          </div>

          {/* Right Column */}
          <div className="md:w-1/3 p-4 bg-[#FFFFFF]">
            <div className="flex flex-col h-full">
              <h3 className="text-2xl text-gray-700 mb-4">Order Summary</h3>
              <hr className="w-full border-dotted border-gray-300 mb-4" />
              {cartItems && cartItems.length > 0 ? (
                <div className="flex justify-between">
                  <span className="text-gray-700 font-semibold">
                    Selected {cartItems.length} item(s) Price
                  </span>
                  <p className="text-right font-bold text-gray-700">
                    Rs {subTotal}
                  </p>
                </div>
              ) : (
                <h1>No Data found</h1>
              )}
              <div className="flex justify-between my-2">
                <span className="text-gray-700 font-semibold">
                  Delivery charge
                </span>
                <p className="text-right text-gray-700 font-bold">Rs 100</p>
              </div>
              <div className="flex items-center justify-center">
                <div className="border border-gray-300 rounded-lg p-4 max-w-sm w-full">
                  <h3 className="text-center font-semibold text-gray-700 mb-4">
                    VOUCHER CODE
                  </h3>
                  <div className="flex items-center">
                    <input
                      className="inputbox flex-grow mr-2 bg-primary border border-primary py-2 px-3 rounded-lg focus:outline-none"
                      placeholder="Enter voucher code"
                    />
                    <button
                      type="button"
                      className="bg-red-600 btn-green hover:bg-red-700 text-white w-16 self-start disabled:cursor-not-allowed disabled:opacity-75 py-2 px-3 rounded-md"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              </div>

              <div className="flex justify-between my-5">
                <span className="text-gray-700 font-semibold">
                  Total payable
                </span>

                <p className="text-right text-gray-700 font-bold">Rs {total}</p>
              </div>
              <hr className="w-full border-dotted border-gray-300 mb-4" />

              <button
                onClick={checkOutHandler}
                className="py-3 px-6 bg-red-600 hover:bg-red-700 text-white rounded mt-4 w-full"
              >
                Proceed to Checkout
              </button>
            </div>
          </div>
        </div>
          </>
        )}

        increase price with adding checkedBox
        <div className="mb-4">
  {/* Price */}
  <span className="text-3xl text-red-500 font-semibold">
    {selectedFlavorCategory
      ? `Rs. ${calculateTotalPrice(
          product?.price,
          selectedFlavorCategoryPriceIncrement + (isEggChecked ? 150 : 0)
        )}`
      : `Rs. ${product?.price}`}
  </span>
  <hr className="border-b border-dotted w-3/5 border-gray-400 mt-2" />
</div>
